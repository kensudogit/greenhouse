/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.2/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.3-jre'
    
    // Spring Framework dependencies
    implementation 'org.springframework:spring-core:6.1.3'
    implementation 'org.springframework:spring-context:6.1.3'
    implementation 'org.springframework:spring-web:6.1.3'
    implementation 'org.springframework:spring-webmvc:6.1.3'
    implementation 'org.springframework:spring-beans:6.1.3'
    implementation 'org.springframework:spring-aop:6.1.3'
    
    // JUnit dependencies for testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.springframework:spring-test:6.1.3'
    testImplementation 'org.springframework:spring-webmvc:6.1.3'
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit4 test framework
            useJUnit('4.13.2')
            
            // Enable debug information for tests (adjusted)
            targets {
                all {
                    testTask.configure {
                        // Enable debug logging (adjusted)
                        debug = false
                        
                        // Enable detailed logging (adjusted)
                        logging.captureStandardOutput(LogLevel.INFO)
                        logging.captureStandardError(LogLevel.INFO)
                        
                        // Enable test execution logging
                        testLogging {
                            events 'started', 'passed', 'skipped', 'failed'
                            showStandardStreams = true
                            showExceptions = true
                            showCauses = true
                            displayGranularity = 2
                            showExceptions = true
                            showCauses = true
                            
                            // Log test execution details
                            info {
                                events 'started', 'passed', 'skipped', 'failed'
                                displayGranularity = 2
                                showExceptions = true
                                showCauses = true
                            }
                        }
                    }
                }
            }
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

// Enable debug mode for the entire project (adjusted to avoid daemon issues)
// gradle.startParameter.debug = true

// Configure logging for better debugging (adjusted)
logging.captureStandardOutput(LogLevel.INFO)
logging.captureStandardError(LogLevel.INFO)

// Custom test task with enhanced debugging
task debugTest(type: Test) {
    group = 'verification'
    description = 'Run tests with enhanced debugging information'

    useJUnit()

    // Detailed test logging
    testLogging {
        events 'started', 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        showStandardStreams = true
        showExceptions = true
        showCauses = true
        displayGranularity = 2
    }

    doFirst {
        def debugPort = findAvailablePort(5005, 5015)
        jvmArgs "-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=${debugPort}"
        println "Debug port allocated: ${debugPort}"
    }

    systemProperty 'org.gradle.debug', 'true'
    systemProperty 'org.gradle.test.debug', 'true'
    systemProperty 'org.gradle.logging.level', 'debug'
}

// Helper function to find available port
def findAvailablePort(int startPort, int endPort) {
    for (int port = startPort; port <= endPort; port++) {
        try {
            new java.net.ServerSocket(port).close()
            return port
        } catch (IOException e) {
            // Port is in use, try next
        }
    }
    throw new RuntimeException("No available ports found between ${startPort} and ${endPort}")
}

// Configure the default test task to inherit debug settings
test {
    testLogging {
        events 'started', 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        showStandardStreams = true
        showExceptions = true
        showCauses = true
        displayGranularity = 2
    }
}
